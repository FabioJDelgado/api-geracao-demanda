def calcular_nota(investimento, lista_investimentos, fator_penalidade):
    soma_investimentos = sum(lista_investimentos)
    menor_investimento = min(lista_investimentos)
    maior_investimento = max(lista_investimentos)
    
    # + (((investimento - maior_investimento) / (maior_investimento - menor_investimento)) * fator_penalidade)
    #nota = ((investimento / soma_investimentos) * 10) + (((investimento - maior_investimento) / (maior_investimento - menor_investimento)) * fator_penalidade)
    #nota = 10 + (((investimento - maior_investimento) / (maior_investimento - menor_investimento)) * fator_penalidade)
    nota = ((investimento / soma_investimentos) * 10)
    
    return nota

# Taxas de impacto:
#   -> 0.1 - impacto mínimo    
#   -> 0.2 - impacto baixo
#   -> 0.3 - impacto moderado
#   -> 0.4 - impacto alto
#   -> 0.5 - impacto muito alto

# Exemplo de uso
lista_investimentos = [1052.19, 1045.99, 1030.39, 1021.99]
print(sum(lista_investimentos))
fator_penalidade = 0.1

for investimento in lista_investimentos:
    nota = calcular_nota(investimento, lista_investimentos, fator_penalidade)
    print(f"Investimento em Propaganda: {investimento}, Nota: {nota:.2f}")
		
---------		

def calcular(investimento, lista_investimentos, fator_penalidade):
    soma_investimentos = sum(lista_investimentos)
    menor_investimento = min(lista_investimentos)
    maior_investimento = max(lista_investimentos)
    
    # Calcular a pontuação base
    pontuacao_base = (investimento - maior_investimento) / (maior_investimento - menor_investimento) + 10
    
    # Aplicar penalidade
    penalidade = fator_penalidade * (investimento / soma_investimentos)
    
    # Calcular a nota final
    nota_final = pontuacao_base - penalidade
    
    return nota_final

# Exemplo de uso
lista_investimentos = [1052.19, 145.99, 130.39, 121.99]
print(sum(lista_investimentos))
fator_penalidade = 5

for investimento in lista_investimentos:
    result = calcular(investimento, lista_investimentos, fator_penalidade)
    print(f"Investimento em Propaganda: {investimento}, Resultado: {result:.2f}")
		
----------		

def calcular(investimento, lista_investimentos, fator_penalidade):
    soma_investimentos = sum(lista_investimentos)
    menor_investimento = min(lista_investimentos)
    maior_investimento = max(lista_investimentos)

    resultado = ((investimento / soma_investimentos) * 10) + (((investimento - maior_investimento) / (maior_investimento - menor_investimento)) * fator_penalidade)
    
    return resultado

# Taxas de impacto:
#   -> 1 - impacto mínimo    
#   -> 2 - impacto baixo
#   -> 3 - impacto moderado
#   -> 4 - impacto alto
#   -> 5 - impacto muito alto

# Exemplo de uso
lista_investimentos = [1052.19, 1045.99, 1030.39, 1021.99]
fator_penalidade = 5

for investimento in lista_investimentos:
    resultado = calcular(investimento, lista_investimentos, fator_penalidade)
    print(f"Investimento em Propaganda: {investimento}, Nota: {resultado:.2f}")

----------	

def calcular(investimento, lista_investimentos, fator_penalidade):
    soma_investimentos = sum(lista_investimentos)
    menor_investimento = min(lista_investimentos)
    maior_investimento = max(lista_investimentos)

    resultado = ((investimento / soma_investimentos) * 10) + (((investimento - maior_investimento) / (maior_investimento - menor_investimento)) * fator_penalidade)
    
    return resultado

# Taxas de impacto:
#   -> 1 - impacto mínimo    
#   -> 2 - impacto baixo
#   -> 3 - impacto moderado
#   -> 4 - impacto alto
#   -> 5 - impacto muito alto

# Exemplo de uso
lista_investimentos = [1052.19, 1045.99, 1030.39, 1021.99]
fator_penalidade = 5

for investimento in lista_investimentos:
    resultado = calcular(investimento, lista_investimentos, fator_penalidade)
    print(f"Investimento em Propaganda: {investimento}, Nota: {resultado:.2f}")

-> esse cálculo não é ruim, o problema é que investimentos próximos tem ficado com notas bem abaixo, quero uma maneira de consiga aumentar as notas parelhas, ou seja, em vez de dar resultados baixos, o resultado fique entre 8 e 6


---------

Possuo um problema e necessito de sua ajuda.
Em um determinado sistema é feito o cálculo para dar notas que variam de 0 a 10 para uma lista de investimentos em propaganda, ou seja, cada investimento em propaganda recebe uma nota de 0 a 10, sendo que quanto pior o investimento, pior a nota.
No sistema se recebe por parâmetro o valor mínimo e máximo para que um investimento tenha resultados positivos na propaganda. Por exemplo, se o valor mínimo for 100 reias, quer dizer que quem investir esse valor recebe a nota mínima que é 1, qualquer valor abaixo disso é 0, caso o valor máximo for 1000, o investimento que fizer esse valor ou maior recebe a nota máxima que é 10. Vale observar que o valor mínimo quer dizer que qualquer investimento abaixo dele não surge efeito nenhum no mercado, e o valor máximo quer dizer que qualquer investimento acima dele não altera o resultado significativamente mais.
Crie um cálculo em Python que receba esses valores de máximo e mínimo de investimento que traga resultados positivos, receba uma lista de investimentos e calcule as notas de cada um baseado nas condicionais propostas.

def calcular_notas(investimentos, valor_minimo, valor_maximo):
    notas = []
    for investimento in investimentos:
        if investimento < valor_minimo:
            nota = 0
        elif investimento >= valor_maximo:
            nota = 10
        else:
            nota = ((investimento - valor_minimo) / (valor_maximo - valor_minimo)) * 9 + 1
        notas.append(nota)
    return notas

# Exemplo de uso
investimentos = [50, 200, 500, 1000, 1500]
valor_minimo = 100
valor_maximo = 1000

notas = calcular_notas(investimentos, valor_minimo, valor_maximo)
for i, nota in enumerate(notas):
    print(f'Investimento {investimentos[i]}: Nota {nota:.2f}')
		
---------

Muito obrigado, funcionou o cálculo.
Agora preciso melhorar esse cálculo acrescentando uma penalidade para notas menores. Essa penalidade é devido a quanto maior o investimento melhor o retorno, então notas menores são penalizadas em função das maiores.
Essa penalização se baseia na ideia de que para um determinado produto a diferença entre os investimentos não resulta em tanto aumento ou diminuição de retornos, mas para outro produto, qualquer mínima diferença já causa grande aumento ou diminuição de retornos.
Para realizar isso leve em consideração uma lista com valores de 1 a 5, sendo 1 o impacto mínimo e 5 o impacto muito alto. Você deverá receber o grau de penalidade como parâmetro.


def calcular_notas_investimentos(valor_minimo, valor_maximo, investimentos, grau_penalidade):
    notas = []
    for investimento in investimentos:
        if investimento < valor_minimo:
            nota = 0
        elif investimento >= valor_maximo:
            nota = 10
        else:
            nota = ((investimento - valor_minimo) / (valor_maximo - valor_minimo)) * 9 + 1
            penalidade = (10 - nota) * (grau_penalidade / 5)
            nota -= penalidade
            if nota < 0:
                nota = 0
        notas.append(nota)
    return notas

# Exemplo de uso da função:
investimentos = [50, 200, 500, 1000, 1500]
valor_minimo = 100
valor_maximo = 5000
grau_penalidade = 1  # Grau de penalidade de 1 a 5
notas = calcular_notas_investimentos(valor_minimo, valor_maximo, investimentos, grau_penalidade)

# Exibir as notas de cada investimento
for i, nota in enumerate(notas):
    print(f"Investimento {i+1}: Nota = {nota}")

---------

def calcular_notas_investimentos(valor_minimo, valor_maximo, investimentos, grau_penalidade):
    notas = []
    maior_valor_lista = max(investimentos)
    for investimento in investimentos:
        if investimento < valor_minimo:
            nota = 0
        elif investimento >= valor_maximo:
            nota = 10
        else:
            nota = ((investimento - valor_minimo) / (valor_maximo - valor_minimo)) * 9 + 1
            if investimento != maior_valor_lista:
                penalidade = (10 - nota) * (grau_penalidade / 5)
                nota -= penalidade
            if nota < 0:
                nota = 0
        notas.append(nota)
    return notas

# Exemplo de uso da função:
investimentos = [50, 200, 500, 1000, 2500]
valor_minimo = 100
valor_maximo = 5000
grau_penalidade = 1  # Grau de penalidade de 1 a 5
notas = calcular_notas_investimentos(valor_minimo, valor_maximo, investimentos, grau_penalidade)

# Exibir as notas de cada investimento
for i, nota in enumerate(notas):
    print(f"Investimento {i+1}: Nota = {nota}")

---------------------------------------------------------------------------------------------------

Ideia: Receber a informação do valor mínimo de investimento para se ter um retorno mínimo de demanda, sendo representado pela nota 1. Investimentos abaixo disso devem receber nota 0. Investimentos acima devem receber nota a partir da proporção de quanto são maiores que o valor mínimo. Deve se ter um outra informação que corresponda a proporção de crescimento do valor mínimo, por exemplo, se o valor mínimo é 1000 com nota 1, o valor 2000 em proporção 1 para 1 seria nota 2, então essa informação deve mudar essa proporção, onde por exemplo 2000 seria nota 1.5 e não 2.

Quero construir esse cálculo: Onde se recebe uma lista com valores investidos em propaganda dando notas de 0 a 10 para cada valor investido. Para fazer o cálculo segue as condições: Receber a informação do valor mínimo de investimento para se ter um retorno mínimo de demanda, sendo representado pela nota 1. Investimentos abaixo disso devem receber nota 0. Investimentos acima devem receber nota a partir da proporção de quanto são maiores que o valor mínimo. Deve se ter um outra informação que corresponda a proporção de crescimento do valor mínimo, por exemplo, se o valor mínimo é 1000 com nota 1, o valor 2000 em proporção 1 para 1 seria nota 2, então essa informação deve mudar essa proporção, onde por exemplo 2000 seria nota 1.5 e não 2, logo não seria apenas uma regra de 3 simples, pois deve se levar em consideração essa proporção. Por último parâmetro deve receber um valor de penalidade variando de 1 a 5, onde 1 representa que as diferenças em investimentos não impactam muito na nota, já 5 representa que qualquer diferença já dá um impacto maior, sendo que o maior investimento não tem penalidade, apenas os abaixo dele.

def calcular_notas(investimentos, valor_minimo, proporcao_crescimento, penalidade):
    # Verificação dos parâmetros
    # Certifica que a penalidade está dentro do intervalo permitido (1 a 5)
    if not 1 <= penalidade <= 5:
        raise ValueError("Penalidade deve estar entre 1 e 5")
    
    # Cálculo das notas
    notas = []  # Inicializa uma lista vazia para armazenar as notas
    max_investimento = max(investimentos)  # Encontra o maior investimento na lista
    
    for investimento in investimentos:  # Itera sobre cada valor de investimento na lista
        if investimento < valor_minimo:  # Verifica se o investimento é menor que o valor mínimo
            nota = 0  # Atribui nota 0 se o investimento for menor que o valor mínimo
        else:
            # Calcula a nota para investimentos iguais ou superiores ao valor mínimo
            # A fórmula considera a diferença do investimento em relação ao valor mínimo
            # dividido pela proporção de crescimento vezes o valor mínimo
            nota = 1 + (investimento - valor_minimo) / (proporcao_crescimento * valor_minimo)
            
            # Aplica a penalidade se o investimento não for o maior na lista
            if investimento < max_investimento:
                # A penalidade reduz a nota com base na diferença entre o maior investimento
                # e o investimento atual, escalado pela penalidade fornecida
                nota -= (max_investimento - investimento) / max_investimento * (penalidade / 5)
            
            # Garante que a nota final esteja entre 0 e 10
            nota = max(0, min(10, nota))
        
        # Adiciona a nota calculada à lista de notas
        notas.append((investimento, nota))
    
    # Retorna a lista de notas calculadas
    return notas

# Exemplo de uso:
# Lista de valores investidos em propaganda
investimentos = [500, 1500, 2500, 3000, 1000]
# Valor mínimo de investimento para obter retorno mínimo de demanda, representando nota 1
valor_minimo = 1000
# Proporção de crescimento do valor mínimo para determinar a escala das notas
proporcao_crescimento = 2
# Fator de penalidade que varia de 1 a 5
penalidade = 3

# Chama a função para calcular as notas e imprime o resultado
notas = calcular_notas(investimentos, valor_minimo, proporcao_crescimento, penalidade)
print(notas)

---------------------------------------------------------------------------------------------------

def calcular_notas(investimentos, valor_minimo, proporcao_crescimento):
    
    # Cálculo das notas
    notas = []  # Inicializa uma lista vazia para armazenar as notas
    max_investimento = max(investimentos)  # Encontra o maior investimento na lista
    
    for investimento in investimentos:  # Itera sobre cada valor de investimento na lista
        if investimento < valor_minimo:  # Verifica se o investimento é menor que o valor mínimo
            nota = 0  # Atribui nota 0 se o investimento for menor que o valor mínimo
        else:
            # Calcula a nota para investimentos iguais ou superiores ao valor mínimo
            # A fórmula considera a diferença do investimento em relação ao valor mínimo
            # dividido pela proporção de crescimento vezes o valor mínimo
            nota = 1 + ((investimento - valor_minimo) / (proporcao_crescimento * valor_minimo))
            
            # Garante que a nota final esteja entre 0 e 10
            nota = max(0, min(10, nota))
        
        # Adiciona a nota calculada à lista de notas
        notas.append((investimento, nota))
    
    # Retorna a lista de notas calculadas
    return notas

# Exemplo de uso:
# Lista de valores investidos em propaganda
investimentos = [500, 1500, 2500, 3000, 1000]

# Valor mínimo de investimento para obter retorno mínimo de demanda, representando nota 1
valor_minimo = 1000

# Proporção de crescimento do valor mínimo para determinar a escala das notas
proporcao_crescimento = 2

# Chama a função para calcular as notas e imprime o resultado
notas = calcular_notas(investimentos, valor_minimo, proporcao_crescimento)
print(notas)