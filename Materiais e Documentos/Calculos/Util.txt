package com.faculdade.apigeracaodemanda.utils;

import com.faculdade.apigeracaodemanda.models.Jogada;
import com.faculdade.apigeracaodemanda.models.Partida;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.UUID;

public class Util {

    public static boolean validaStringVazia(String string) {
        return string == null || string.trim().isEmpty();
    }

    public static String geraIdentificadorUUID() {
        return UUID.randomUUID().toString();
    }

    public static void atribuiIdentificadorPartidaEJogada(Partida partida) {
        if(validaStringVazia(partida.getIdentificacaoPartidaAPI())) {
            partida.setIdentificacaoPartidaAPI(geraIdentificadorUUID());
            for (Jogada jogada : partida.getJogadas()) {
                jogada.setIdentificacaoJogadaAPI(geraIdentificadorUUID());
            }
        }
    }

    private static String montaJsonSalvamentoRodadaPartida(Partida partida, JsonNode jsonNode) {
        String json = "{"
                    + "\"identificacaoPartidaCliente\": \"" + partida.getIdentificacaoPartidaCliente() + "\","
                    + "\"identificacaoPartidaAPI\": \"" + partida.getIdentificacaoPartidaAPI() + "\","
                    + "\"taxaBasicaJuros\": "+ partida.getVariaveisMacroeconomicas().getTaxaBasicaJuros() + ","
                    + "\"jogadas\": [";
        for (Jogada jogada : partida.getJogadas()) {
            json += "{"
                  + "\"identificacaoJogadaCliente\": \"" + jogada.getIdentificacaoJogadaCliente() + "\","
                  + "\"identificacaoJogadaAPI\": \"" + jogada.getIdentificacaoJogadaAPI() + "\","
                  + "\"demandaTotalJogada\": " + jogada.getDemandaTotalJogada() + ",";
            if(!jsonNode.isEmpty()){
                for(int i = 0; i < jsonNode.get("jogadas").size(); i++){
                    if(jsonNode.get("jogadas").get(i).get("identificacaoJogadaAPI").asText().equals(jogada.getIdentificacaoJogadaAPI())){
                        json += "\"demandaTotalPartida\": " + (jsonNode.get("jogadas").get(i).get("demandaTotalPartida").asInt() + jogada.getDemandaTotalJogada())
                            + "},";
                    }
                }
            } else{
                json += "\"demandaTotalPartida\": " + jogada.getDemandaTotalJogada()
                    + "},";
            }
        }
        json = json.substring(0, json.length() - 1) + "]}";
        return json;
    }

    public static void salvaRodadaPartida(Partida partida) {
        try {
            // Variável que armazena o caminho a ser utilizado para salvar o arquivo
            String path = "src/main/java/com/faculdade/apigeracaodemanda/data/";

            // Variável que armazena o arquivo a ser salvo
            File file = new File(path + "partida-" + partida.getIdentificacaoPartidaAPI() + ".json");

            // Se o arquivo não existir, cria o arquivo
            if (!file.exists()) {
                // Cria o arquivo
                file.createNewFile();
            }

            // Variável para mapear o JSON do arquivo
            ObjectMapper objectMapper = new ObjectMapper();

            // Variável que armazena o JSON do arquivo
            JsonNode jsonNode = objectMapper.readTree(file);

            // Variável que armazena o JSON a ser salvo
            String json = montaJsonSalvamentoRodadaPartida(partida, jsonNode);

            // Variável que armazena o FileWriter para escrever no arquivo
            FileWriter fileWriter = new FileWriter(file, false);

            // Escreve o JSON no arquivo
            fileWriter.write(json);

            // Fecha o FileWriter
            fileWriter.close();

        } catch (Exception e) {
            throw new RuntimeException("Erro ao salvar a rodada da partida: " + e.getMessage());
        }
    }

    public static JsonNode lerArquvioPartida(String identificacaoPartidaAPI) throws IOException {

        // Variável que armazena o arquivo a ser lido
        File file = new File("src/main/java/com/faculdade/apigeracaodemanda/data/partida-" + identificacaoPartidaAPI + ".json");

        // Variável que armazena o JSON de retorno do arquivo caso exista
        JsonNode jsonNode = null;

        // Verifica se o arquivo existe caso não seja a primeira rodada
        if (file.exists()) {
            // Variável para mapear o JSON do arquivo
            ObjectMapper objectMapper = new ObjectMapper();

            jsonNode = objectMapper.readTree(file);
        }

        return jsonNode;
    }
}
